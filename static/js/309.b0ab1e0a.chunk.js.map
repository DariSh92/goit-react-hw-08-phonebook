{"version":3,"file":"static/js/309.b0ab1e0a.chunk.js","mappings":"uSAIaA,EAAeC,EAAAA,EAAAA,IAAH,2CAIZC,GAAYD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,mGAMTG,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,0OAYLK,GAAQL,EAAAA,EAAAA,GAAOM,EAAAA,GAAPN,CAAH,sLAULO,EAAQP,EAAAA,EAAAA,MAAH,mHAOLQ,EAAeR,EAAAA,EAAAA,OAAH,8O,SChCnBS,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,MAAOF,EAAAA,KAAaE,MAAM,IAAIC,WAC9BC,SAAUJ,EAAAA,KAAaK,IAAI,GAAGC,IAAI,IAAIC,QAAQ,6EAC5C,uBAAuBJ,aAmChBK,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,KAE1BC,EAAAA,EAAAA,YAAU,WAER,OADAL,GAASM,EAAAA,EAAAA,IAAiBJ,IACnB,WACLF,GAASM,EAAAA,EAAAA,IAAiB,MAC3B,CACF,IASC,OACJ,SAAC1B,EAAD,WACS,SAAC,KAAD,CACD2B,cAAe,CAAEd,MAAO,GAAIE,SAAU,IACtCa,SAXe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BV,GAASW,EAAAA,EAAAA,IAAMF,IACD,OAAVP,GACFQ,GAEH,EAOKE,iBAAkBtB,EAHjB,UAKI,UAACR,EAAD,CAAW+B,aAAa,MAAxB,WACG,SAACzB,EAAD,CAAO0B,QAAQ,QAAf,oBACA,SAAC9B,EAAD,CACI+B,KAAK,QACLC,KAAK,QACLC,YAAY,2BACZvB,UAAQ,KAEZ,SAACR,EAAD,CAAO8B,KAAK,QAAQE,UAAU,SAG9B,SAAC9B,EAAD,CAAO0B,QAAQ,WAAf,uBACA,SAAC9B,EAAD,CACI+B,KAAK,WACLC,KAAK,WACLC,YAAY,8BACZvB,UAAQ,KAEZ,SAACR,EAAD,CAAO8B,KAAK,WAAWE,UAAU,SACjC,SAAC7B,EAAD,CAAc0B,KAAK,SAAnB,0BAMf,EChGc,SAASI,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,wCAEF,SAACrB,EAAD,MAGL,C","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\n\nexport const LoginWrapper = styled.div`\nmargin-top: 55px;\n`;\n\nexport const FormWrapp = styled(Form)`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n`;\n\nexport const Input = styled(Field)`\n    font-size: 16px;\n    width: 300px;\n    height: 30px;\n    margin-bottom: 15px;\n    padding: 5px;\n    border-radius: 5px;\n    outline-color: #9582ee;\n    border-color: #624ec1;\n    font-weight: 700;\n`;\n\nexport const Error = styled(ErrorMessage)`\n    display: flex;\n    width: 300px;\n    text-align: center;\n    color: red;\n    margin-bottom: 15px;\n    font-weight: 500;\n    font-size: 16px;      \n`;\n\nexport const Label = styled.label`\n    font-size: 24px;\n    font-weight: 500;\n    margin-bottom: 5px;\n    color: #cfbed9;\n`;\n\nexport const SubmitButton = styled.button`\n    width: 150px;\n    height: 40px;\n    background-color: #ceaadb;\n    border: none;\n    border-radius: 5px;\n    font-size: 16px;\n    font-weight: 700;\n    cursor: pointer;\n    outline-color: #533f63;\n    `;","import { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { updateErrorLogIn } from 'redux/auth/authSlice';\nimport { selectLogInError } from 'redux/auth/selectors';\nimport { logIn } from 'redux/auth/operations';\nimport { FormWrapp, Input, Error, Label, SubmitButton, LoginWrapper } from 'components/LoginForm/LoginForm.styled';\n\n\n\nconst schema = yup.object().shape({\n    email: yup.string().email('').required(),\n    password: yup.string().min(4).max(12).matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Password is correct').required(),\n\n})\n\n// export const LoginForm = () => {\n//   const dispatch = useDispatch();\n//   const error = useSelector(selectLogInError);\n  \n//   useEffect(() => {\n//     dispatch(updateErrorLogIn(error));\n//     return () => {\n//       dispatch(updateErrorLogIn(null));\n//     };\n//   });\n//   //   const handleSubmit = e => {\n//   // //   // e.preventDefault();\n//   // //   const form = e.currentTarget;\n//   // //   dispatch(\n//   // //     logIn({\n//   // //       email: form.elements.email.value,\n//   // //       password: form.elements.password.value,\n//   // //     })\n//   // //   );\n//   // //   form.reset();\n//   // // };\n\n\n//   const handleSubmit = (values, { resetForm }) => {\n//     dispatch(logIn(values));\n//     if (error !== null) {\n//       resetForm();\n//     }\n//   };\n\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectLogInError);\n\n  useEffect(() => {\n    dispatch(updateErrorLogIn(error));\n    return () => {\n      dispatch(updateErrorLogIn(null));\n    };\n  });\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(logIn(values));\n    if (error !== null) {\n      resetForm();\n    }\n  };\n    \n    return (\n<LoginWrapper>\n         <Formik\n        initialValues={{ email: '', password: '' }}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n        >\n             <FormWrapp autoComplete='off'>\n                <Label htmlFor='email'>Email</Label>\n                <Input\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder='Please, enter your Email'\n                    required\n                />\n                <Error name=\"email\" component='div' />\n                \n\n                <Label htmlFor='password'>Password</Label>\n                <Input\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder='Please, enter your Password'\n                    required\n                />\n                <Error name=\"password\" component='div' />\n                <SubmitButton type='submit'>Log in</SubmitButton>\n        \n            </FormWrapp>\n        </Formik>\n</LoginWrapper>\n  );\n};","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["LoginWrapper","styled","FormWrapp","Form","Input","Field","Error","ErrorMessage","Label","SubmitButton","schema","yup","shape","email","required","password","min","max","matches","LoginForm","dispatch","useDispatch","error","useSelector","selectLogInError","useEffect","updateErrorLogIn","initialValues","onSubmit","values","resetForm","logIn","validationSchema","autoComplete","htmlFor","type","name","placeholder","component","Login","Helmet"],"sourceRoot":""}